pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
        DOCKER_IMAGE_NAME = 'your-dockerhub-username/status-page'
        GITHUB_CREDENTIALS_ID = 'github-ssh-key'
    }

    stages {

        stage('Clone Repository') {
            steps {
                script {
                    echo "Cloning the Git repository..."
                }
                git branch: 'main',
                    url: 'git@github.com:yair232/status-page.git',
                    credentialsId: "${GITHUB_CREDENTIALS_ID}"
            }
        }

        stage('Terraform Init & Apply') {
            environment {
                AWS_ACCESS_KEY_ID = credentials('aws-credentials')  // Reference to the Jenkins credentials ID
                AWS_SECRET_ACCESS_KEY = credentials('aws-credentials')
            }
            steps {
                dir('final-project-terraform') {
                    script {
                        echo "Initializing and applying Terraform configuration..."
                    }
                    sh '''
                    terraform init
                    terraform plan -out=tfplan
                    terraform apply -auto-approve tfplan
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image from the Dockerfile..."
                }
                sh '''
                docker build -t ${DOCKER_IMAGE_NAME}:latest .
                '''
            }
        }

        stage('Test Docker Image') {
            steps {
                script {
                    echo "Testing Docker image for basic functionality..."
                }
                sh '''
                docker run --name test-container -d ${DOCKER_IMAGE_NAME}:latest
                '''
                sh '''
                docker exec test-container /bin/bash -c "echo 'Running health check...'; sleep 2; echo 'Service is up'"
                '''
                sh '''
                docker stop test-container
                docker rm test-container
                '''
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    echo "Pushing Docker image to Docker Hub..."
                }
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker push ${DOCKER_IMAGE_NAME}:latest
                    docker logout
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                echo "Cleaning up workspace and Docker resources..."
            }
            cleanWs()
            sh 'docker system prune -f'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}
